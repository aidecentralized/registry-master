version: '3.3'

services:
  # MongoDB Instance (will be part of replica set)
  mongodb:
    image: mongo:7.0
    container_name: registry-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/init.js:ro
      - ./mongodb-keyfile:/opt/keyfile/mongodb-keyfile
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-registry_master}
    command: |
      bash -c '
        cp /opt/keyfile/mongodb-keyfile /tmp/mongodb-keyfile
        chmod 600 /tmp/mongodb-keyfile
        chown mongodb:mongodb /tmp/mongodb-keyfile
        exec docker-entrypoint.sh mongod --replSet ${REPLICA_SET_NAME:-rs0} --bind_ip_all --port 27017 --keyFile /tmp/mongodb-keyfile
      '
    networks:
      - registry-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/${MONGO_DATABASE:-registry_master} --quiet
      interval: 30s
      timeout: 10s
      retries: 5


  redis:
    image: redis:7-alpine
    container_name: registry-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - registry-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  registry-service:
    build: .
    container_name: registry-service
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      MONGODB_URI: ${MONGODB_URI:-mongodb://admin:password@mongodb:27017/?authSource=admin&replicaSet=rs0}
      MONGODB_DATABASE: ${MONGO_DATABASE:-registry_master}
      ADMIN_TOKEN: ${ADMIN_TOKEN:-admin-secret-token}
      PORT: 8000
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS:-34.229.1.253:9092}
      KAFKA_TOPIC: ${KAFKA_TOPIC:-demo-topic}
      KAFKA_ENABLED: ${KAFKA_ENABLED:-true}
    depends_on:
      - mongodb
      - redis
    networks:
      - registry-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Database initialization service (run manually after replica set is ready)
  db-init:
    build: .
    container_name: registry-db-init
    environment:
      MONGODB_URI: ${MONGODB_URI}
      MONGODB_DATABASE: ${MONGO_DATABASE:-registry_master}
      SEED_DATA: "true"
    command: ["python", "-m", "scripts.init_db", "--seed"]
    depends_on:
      - mongodb
    networks:
      - registry-network
    restart: "no"

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  registry-network:
    driver: bridge
